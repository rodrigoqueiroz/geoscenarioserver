# Generated from sv/btree/parser/BTreeDSL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from sv.btree.parser.BTreeDSLParser import BTreeDSLParser



def serializedATN():
    return [
        4,0,15,135,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,85,8,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,3,9,96,8,9,1,10,1,10,1,11,3,11,101,8,11,1,11,
        5,11,104,8,11,10,11,12,11,107,9,11,1,11,3,11,110,8,11,1,11,4,11,
        113,8,11,11,11,12,11,114,1,12,4,12,118,8,12,11,12,12,12,119,1,13,
        1,13,1,13,1,13,1,14,3,14,127,8,14,1,14,1,14,5,14,131,8,14,10,14,
        12,14,134,9,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,1,0,6,2,0,60,60,62,62,2,0,43,43,
        45,45,1,0,48,57,1,0,46,46,3,0,65,90,95,95,97,122,2,0,9,9,32,32,147,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,
        1,0,0,0,3,44,1,0,0,0,5,46,1,0,0,0,7,56,1,0,0,0,9,58,1,0,0,0,11,60,
        1,0,0,0,13,69,1,0,0,0,15,77,1,0,0,0,17,84,1,0,0,0,19,95,1,0,0,0,
        21,97,1,0,0,0,23,100,1,0,0,0,25,117,1,0,0,0,27,121,1,0,0,0,29,126,
        1,0,0,0,31,32,5,98,0,0,32,33,5,101,0,0,33,34,5,104,0,0,34,35,5,97,
        0,0,35,36,5,118,0,0,36,37,5,105,0,0,37,38,5,111,0,0,38,39,5,114,
        0,0,39,40,5,116,0,0,40,41,5,114,0,0,41,42,5,101,0,0,42,43,5,101,
        0,0,43,2,1,0,0,0,44,45,5,58,0,0,45,4,1,0,0,0,46,47,5,99,0,0,47,48,
        5,111,0,0,48,49,5,110,0,0,49,50,5,100,0,0,50,51,5,105,0,0,51,52,
        5,116,0,0,52,53,5,105,0,0,53,54,5,111,0,0,54,55,5,110,0,0,55,6,1,
        0,0,0,56,57,5,40,0,0,57,8,1,0,0,0,58,59,5,41,0,0,59,10,1,0,0,0,60,
        61,5,109,0,0,61,62,5,97,0,0,62,63,5,110,0,0,63,64,5,101,0,0,64,65,
        5,117,0,0,65,66,5,118,0,0,66,67,5,101,0,0,67,68,5,114,0,0,68,12,
        1,0,0,0,69,70,5,115,0,0,70,71,5,117,0,0,71,72,5,98,0,0,72,73,5,116,
        0,0,73,74,5,114,0,0,74,75,5,101,0,0,75,76,5,101,0,0,76,14,1,0,0,
        0,77,78,5,44,0,0,78,16,1,0,0,0,79,85,5,63,0,0,80,81,5,45,0,0,81,
        85,5,62,0,0,82,83,5,124,0,0,83,85,5,124,0,0,84,79,1,0,0,0,84,80,
        1,0,0,0,84,82,1,0,0,0,85,18,1,0,0,0,86,96,7,0,0,0,87,88,5,61,0,0,
        88,96,5,61,0,0,89,90,5,62,0,0,90,96,5,61,0,0,91,92,5,60,0,0,92,96,
        5,61,0,0,93,94,5,33,0,0,94,96,5,61,0,0,95,86,1,0,0,0,95,87,1,0,0,
        0,95,89,1,0,0,0,95,91,1,0,0,0,95,93,1,0,0,0,96,20,1,0,0,0,97,98,
        5,61,0,0,98,22,1,0,0,0,99,101,7,1,0,0,100,99,1,0,0,0,100,101,1,0,
        0,0,101,109,1,0,0,0,102,104,7,2,0,0,103,102,1,0,0,0,104,107,1,0,
        0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,
        0,0,108,110,7,3,0,0,109,105,1,0,0,0,109,110,1,0,0,0,110,112,1,0,
        0,0,111,113,7,2,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,
        0,0,114,115,1,0,0,0,115,24,1,0,0,0,116,118,7,4,0,0,117,116,1,0,0,
        0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,26,1,0,0,0,
        121,122,7,5,0,0,122,123,1,0,0,0,123,124,6,13,0,0,124,28,1,0,0,0,
        125,127,5,13,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,
        128,132,5,10,0,0,129,131,5,32,0,0,130,129,1,0,0,0,131,134,1,0,0,
        0,132,130,1,0,0,0,132,133,1,0,0,0,133,30,1,0,0,0,134,132,1,0,0,0,
        11,0,84,95,100,105,109,114,117,119,126,132,1,6,0,0
    ]

class BTreeDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    OPERATOR = 9
    BOP = 10
    ATT = 11
    FLOAT = 12
    WORD = 13
    WS = 14
    NL = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'behaviortree'", "':'", "'condition'", "'('", "')'", "'maneuver'", 
            "'subtree'", "','", "'='" ]

    symbolicNames = [ "<INVALID>",
            "OPERATOR", "BOP", "ATT", "FLOAT", "WORD", "WS", "NL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "OPERATOR", "BOP", "ATT", "FLOAT", "WORD", "WS", 
                  "NL" ]

    grammarFileName = "BTreeDSL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class BTreeDSLDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: BTreeDSLLexer = lexer

        def pull_token(self):
            return super(BTreeDSLLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.BTreeDSLDenter(self, self.NL, BTreeDSLParser.INDENT, BTreeDSLParser.DEDENT, ignore_eof=False)
        return self.denter.next_token()



